version: '2.2'

services:
  frontend:
    build: apps/frontend
    container_name: martletplace_frontend
    restart: unless-stopped
    depends_on: []
    volumes: [ ./apps/frontend/src:/app/src ]
    environment: []
    networks: [ proxy-frontend ]

  proxy:
    build: apps/proxy
    container_name: martletplace_proxy
    restart: unless-stopped
    depends_on: []
    volumes: [ ./apps/proxy:/app ]
    environment: []
    ports: [ 80:80, 443:443 ]
    networks:
      - proxy-frontend
      - proxy-user
      - proxy-listing
      - proxy-review
      - proxy-message
      - proxy-search
      - proxy-recommend

  user:
    build:
      context: apps/backend/user
      additional_contexts:
        - lib=apps/backend/lib
    container_name: martletplace_user
    restart: unless-stopped
    depends_on: []
    volumes: [ ./apps/backend/user/src:/app/service/src ]
    environment:
      - DB_ENDPOINT=postgres://martletplace:johuigytfrdcv@datalayer:8300/martletplace
      - EMAIL_ENDPOINT=http://datalayer:8302/api/email
    networks: [ proxy-user, user-datalayer ]

  listing:
    build:
      context: apps/backend/listing
      additional_contexts:
        - lib=apps/backend/lib
    container_name: martletplace_listing
    restart: unless-stopped
    depends_on: []
    volumes: [ ./apps/backend/listing/src:/app/service/src ]
    environment:
      - DB_ENDPOINT=postgres://martletplace:johuigytfrdcv@datalayer:8300/martletplace
    networks: [ proxy-listing, listing-datalayer ]

  review:
    build:
      context: apps/backend/review
      additional_contexts:
        - lib=apps/backend/lib
    container_name: martletplace_review
    restart: unless-stopped
    depends_on: []
    volumes: [ ./apps/backend/review/src:/app/service/src ]
    environment:
      - DB_ENDPOINT=postgres://martletplace:johuigytfrdcv@datalayer:8300/martletplace
    networks: [ proxy-review, review-datalayer ]

  message:
    build: apps/backend/message
    container_name: martletplace_message
    restart: unless-stopped
    depends_on: []
    volumes: [ ./apps/backend/message/src:/app/src ]
    environment:
      - DB_ENDPOINT=postgres://martletplace:johuigytfrdcv@datalayer:8300/martletplace
    networks: [ proxy-message, message-datalayer ]

  search:
    build: apps/algorithm/search
    container_name: martletplace_search
    restart: unless-stopped
    depends_on:
      elasticsearch:
        condition: service_healthy
    volumes: [ ./apps/algorithm/search/src:/app/src ]
    environment:
      - DB_ENDPOINT=postgres://martletplace:johuigytfrdcv@datalayer:8300/martletplace
      - ES_ENDPOINT=https://elastic:serxdfcghjfc@elasticsearch:8311
    networks: [ proxy-search, search-datalayer, search-elasticsearch ]

  recommend:
    build: apps/algorithm/recommend
    container_name: martletplace_recommend
    restart: unless-stopped
    depends_on: []
    volumes: [ ./apps/algorithm/recommend/src:/app/src ]
    environment:
      # needs to be postgresql+asyncpg for sqlalchemy to be happy
      - DB_ENDPOINT=postgresql+asyncpg://martletplace:johuigytfrdcv@datalayer:8300/martletplace
    networks: [ proxy-recommend, recommend-datalayer ]

  datalayer:
    build: apps/data/datalayer
    container_name: martletplace_datalayer
    restart: unless-stopped
    depends_on:
      - database
    volumes: []
    environment:
      - POSTGRESQL_USERNAME=martletplace
      - POSTGRESQL_PASSWORD=johuigytfrdcv
      - POSTGRESQL_DATABASE=martletplace
      - POSTGRESQL_HOST=database
      - POSTGRESQL_PORT=8310
    networks:
      - datalayer-database
      - datalayer-elasticsearch
      - datalayer-cache
      - datalayer-blob
      - user-datalayer
      - listing-datalayer
      - review-datalayer
      - message-datalayer
      - search-datalayer
      - recommend-datalayer
      - pgsync-datalayer

  database:
    build: apps/data/database
    container_name: martletplace_database
    restart: unless-stopped
    depends_on: []
    volumes: [ ./apps/data/database/populatedb.sql:/docker-entrypoint-initdb.d/populatedb.sql, ./apps/data/database/recommender/trainingData.csv:/docker-entrypoint-initdb.d/recommender/trainingData.csv ]
    environment:
      - POSTGRES_USER=martletplace
      - POSTGRES_PASSWORD=johuigytfrdcv
      - POSTGRES_DB=martletplace
    networks: [ datalayer-database ]

  elasticsearch:
    build: apps/data/elasticsearch
    container_name: martletplace_elasticsearch
    restart: unless-stopped
    depends_on: []
    volumes: []
    environment:
      - ELASTIC_PASSWORD=serxdfcghjfc
    networks: [ datalayer-elasticsearch, pgsync-elasticsearch, search-elasticsearch ]
    mem_limit: 1GB

  pgsync:
    build: apps/data/pgsync
    container_name: martletplace_pgsync
    restart: unless-stopped
    depends_on:
      datalayer:
        condition: service_started
      elasticsearch:
        condition: service_healthy
      cache:
        condition: service_started
    environment:
      - PG_HOST=datalayer
      - PG_PORT=8300
      - PG_USER=martletplace
      - PG_PASSWORD=johuigytfrdcv
      - ELASTICSEARCH_HOST=elasticsearch
      - ELASTICSEARCH_PORT=8311
      - ELASTICSEARCH_USER=elastic
      - ELASTICSEARCH_PASSWORD=serxdfcghjfc
      - ELASTICSEARCH_SCHEME=https
      - ELASTICSEARCH_VERIFY_CERTS=False
      - REDIS_HOST=cache
      - REDIS_PORT=8313
      - REDIS_DB=0
    networks:
      - pgsync-datalayer
      - pgsync-elasticsearch
      - pgsync-cache

  cache:
    build: apps/data/cache
    container_name: martletplace_cache
    restart: unless-stopped
    depends_on: []
    volumes: []
    environment:
      - DFLY_port=8313
    networks: [ pgsync-cache ]

networks:
  proxy-frontend:
  proxy-user:
  proxy-listing:
  proxy-review:
  proxy-message:
  proxy-search:
  proxy-recommend:
  user-datalayer:
  listing-datalayer:
  review-datalayer:
  message-datalayer:
  search-datalayer:
  search-elasticsearch:
  recommend-datalayer:
  datalayer-database:
  datalayer-elasticsearch:
  datalayer-cache:
  datalayer-blob:
  pgsync-datalayer:
  pgsync-elasticsearch:
  pgsync-cache:
